name: "🔄 README Stats Sync"

on:
  push:
    branches: [ "main" ]
    paths:
      - "src/main/java/boj/**"
      - ".github/workflows/readme-sync.yml"
      - "docs/problems/**"
      - "mkdocs.yml"
  workflow_dispatch: {}

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Generate problem table & update mkdocs nav
        id: gen
        run: |
          python - <<'PY'
          import glob, re, pathlib, sys, io, os

          # 수집
          nums = []
          for p in glob.glob("src/main/java/boj/p[0-9]*"):
              m = re.search(r"p(\d+)$", p)
              if m: nums.append(int(m.group(1)))
          nums = sorted(set(nums))

          # 표 생성 (코드/문서 링크, 5자리 패딩)
          rows = ["| 번호 | 링크 | 메모 |", "|---:|:---|:---|"]
          for n in nums:
              pad = f"{n:05d}"
              code = f"src/main/java/boj/p{n}/Main.java"
              doc_md = pathlib.Path(f"docs/problems/{pad}.md")
              links = []
              if doc_md.exists():
                  links.append(f"[문서](https://v4n1lla.github.io/boj-java/problems/{pad}/)")
              links.append(f"[코드]({code})")
              rows.append(f"| {pad} | {' / '.join(links)} |  |")
          table = "\n".join(rows) + "\n"
          pathlib.Path("problem_table.md").write_text(table, encoding="utf-8")

          # mkdocs.yml NAV 자동 치환
          mk = pathlib.Path("mkdocs.yml").read_text(encoding="utf-8")
          start = "# PROBLEM_NAV:START"
          end   = "# PROBLEM_NAV:END"
          import re
          pat = re.compile(rf"({re.escape(start)})(.*?)({re.escape(end)})", re.S)

          # 문서가 존재하는 문제만 NAV 라인 생성
          nav_lines = []
          for n in nums:
              pad = f"{n:05d}"
              if pathlib.Path(f"docs/problems/{pad}.md").exists():
                  nav_lines.append(f"      - BOJ {pad}: problems/{pad}.md")
          if not nav_lines:
              nav_lines = ["      # (문서 스텁이 없습니다)"]

          if pat.search(mk):
              block = "\n".join([start] + nav_lines + [end])
              mk2 = pat.sub(block, mk)
              if mk2 != mk:
                  pathlib.Path("mkdocs.yml").write_text(mk2, encoding="utf-8")
                  print("NAV_UPDATED")

          # 출력 파일 경로를 GITHUB_OUTPUT로 전달
          with open(os.environ["GITHUB_OUTPUT"], "a") as gh:
              gh.write(f"table_path=problem_table.md\n")
          PY

      - name: Update README (marker replace)
        id: upd
        run: |
          RESULT=$(python3 scripts/update_readme.py < "${{ steps.gen.outputs.table_path }}")
          echo "result=$RESULT" >> "$GITHUB_OUTPUT"
          echo "Python said: $RESULT"

      - name: Commit & push if changed
        env:
          REF_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail

          # 변경 없으면 종료
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes."; exit 0
          fi

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 최신 원격 반영 후 스테이징
          git fetch origin "$REF_NAME"
          git rebase "origin/$REF_NAME" || git rebase --abort

          git add README.md mkdocs.yml problem_table.md || true
          if git diff --cached --quiet; then
            echo "No staged changes for target files."; exit 0
          fi

          # 푸시 재시도(경합 대비)
          for i in 1 2 3; do
            if git push origin "HEAD:$REF_NAME"; then
              echo "Pushed."; exit 0
            fi
            echo "Push failed (#$i). Rebasing and retrying..."
            git fetch origin "$REF_NAME"
            git rebase "origin/$REF_NAME" || git rebase --abort
            sleep 2
          done

          echo "❌ Push still failing after retries."
          exit 1